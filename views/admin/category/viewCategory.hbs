<div class="container d-flex flex-column align-items-center mt-2">
    {{#if success}}
    <div class="alert alert-success alert-dismissible fade show mt-2 mb-3">
        <strong>{{success}}</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    {{/if}}
    {{#if error}}
    <div class="alert alert-danger alert-dismissible fade show mt-2 mb-3">
        <strong>{{error}}</strong>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    {{/if}}
    <div class="card w-75">
        <div class="card-header d-flex flex-column justify-content-center align-items-center">
            <h5 class="card-title"style="font-weight: bold;">DANH SÁCH DANH MỤC</h5>
        </div>
    </div>
    <div class="w-75 d-flex flex-row justify-content-end mt-2 mb-2" style="display: flex; gap: 10px;">
        <button type="button" class="btn btn-primary btnAddCat" style="width:150px;" data-bs-toggle="modal" data-bs-target="#exampleModal">
        Thêm danh mục
        </button>
        <button type="button" class="btn btn-primary btnAddItem" style="width:180px;" data-bs-toggle="modal" data-bs-target="#exampleModal2">
        Thêm danh mục con
        </button>
    </div>
    <table class="table w-75">
        <colgroup>
            <col span="1" style="width: 5%;">
            <col span="1" style="width: 35%;">
            <col span="1" style="width: 20%;">
            <col span="1" style="width: 45%;">
        </colgroup>
        <thead class="table-dark">
            <th class="align-middle text-center">ID</th>
            <th class="align-middle text-center">Tên danh mục</th>
            <th class="align-middle text-center">Thao tác</th>
            <th class="align-middle text-center">Danh mục con</th>
        </thead>
        <tbody>

        </tbody>
    </table>
    <div class="pagination w-75 d-flex flex-row justify-content-center align-items-center">
        <button class="btn btn-light previous-page ms-1 me-1" style="width:90px;">Trước</button>
        <input type="number" class="form-control current-page" style="width:60px;" min="1" value="1"> /
        <input type="number" class="form-control max-page" style="width:60px;" value="{{max}}" disabled>
        {{!-- <span class="max-page text-center" style="width:60px;"></span> --}}
        <button class="btn btn-light next-page ms-1 me-1" style="width:90px;">Sau</button>
    </div>
</div>


<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Thêm danh mục</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="col">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="addCate" id="basic-addon2">Tên danh mục</label>
                        <input name="newCategory" value="" type="text" class="form-control tmp" aria-describedby="basic-addon1" id="addCate" required>
                        <i class="error addCatee"></i>
                    </div>
                </div>
            </div>    
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary cancel" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" onclick="handleAdd(event)">Lưu thay đổi</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Thêm danh mục con</h1>
                <button type="button" class="btn-close cancel" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="col">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="newID" id="basic-addon2">Mã</label>
                        <input name="newCategory" value="" type="text" class="form-control tmp" aria-describedby="basic-addon1" id="newID" required>
                    </div>
                        <i class="error newIDD"></i>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="newNameItem" id="basic-addon2">Tên</label>
                        <input name="newCategory" value="" type="text" class="form-control tmp" aria-describedby="basic-addon1" id="newNameItem" required>
                    </div>
                    <i class="error newNameItemm"></i>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="catItemID" id="basic-addon2">Thuộc danh mục</label>
                        <select class="form-select form-select-sm tmp" aria-label="Small select example" id="catItemID" required>
                            <option value="" style="display:none">Chọn danh mục</option>
                            {{#each categories}}
                            <option value="{{this.catID}}">{{this.catName}}</option>
                            {{/each}}
                        </select>
                    </div>
                      <i class="error catItemIDD"></i>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary cancel" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" onclick="handleAddItem(event)">Lưu thay đổi</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
  window.onload = function () {
        let url = new URL(window.location.href);
        let params = new URLSearchParams(url.search);
        /*if (params.has("delete")) {
            params.delete("delete");
            url.search = params.toString();
            window.location.href = url.toString();
        }
        if (params.has("edit")) {
            params.delete("edit");
            url.search = params.toString();
            window.location.href = url.toString();
        }
        if (params.has("add")) {
            url.search = ""
            window.location.href = url.toString();
        }
        if (params.has("catName")) {
            params.delete("catName");

            url.search = ""
            window.location.href = url.toString();
        }*/
    }
$(() => {      
  const str = /^(?=\S)[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/;


  const showError = (message) => {
    $(".error.addCatee").text(message);
    $(".error.addCatee").css("visibility", "visible");
  };
  const hideError = () => {
    $(".error.addCatee").text("");
    $(".error.addCatee").css("visibility", "hidden");
  };
  $("#addCate").on("blur", async function(e){
    const value = e.target.value;
    if (!value.match(str)) {
      showError("Tên danh mục gồm 5 ký tự trở lên, không chứa số và 2 khoảng trắng liên tiếp");
    } else {
      hideError();
    }
  });
  $("#addCate").on("focus", async function (e) {
    hideError();
  });
  const showError1 = (message) => {
    $(".error.newIDD").text(message);
    $(".error.newIDD").css("visibility", "visible");
  };
  const hideError1 = () => {
    $(".error.newIDD").text("");
    $(".error.newIDD").css("visibility", "hidden");
  };
  $("#newID").on("blur", async function(e){
    const value = e.target.value;
    if (!value.match(/^[A-Z]{3}$/)) {
      showError1("Mã danh mục con chỉ chứa 3 ký tự và chỉ có chữ in hoa");
    } else {
      hideError1();
    }
  });

  $("#newID").on("focus", async function (e) {
    hideError1();
});
    const showError2 = (message) => {
    $(".error.newNameItemm").text(message);
    $(".error.newNameItemm").css("visibility", "visible");
  };
  const hideError2 = () => {
    $(".error.newNameItemm").text("");
    $(".error.newNameItemm").css("visibility", "hidden");
  };
  $("#newNameItem").on("blur", async function(e){
    const value = e.target.value;
    if (!value.match(/^(?=\S)[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/)) {
      showError2("Gồm 5 ký tự trở lên, không chứa số và 2 khoảng trắng liên tiếp");
    } else {
      hideError2();
    }
  });

  $("#newNameItem").on("focus", async function (e) {
    hideError2();
});

  const showError3 = (message) => {
    $(".error.catItemIDD").text(message);
    $(".error.catItemIDD").css("visibility", "visible");
  };
  const hideError3 = () => {
    $(".error.catItemIDD").text("");
    $(".error.catItemIDD").css("visibility", "hidden");
  };
  $("#catItemID").on("blur", async function(e){
    const value = e.target.value;
    const selectedValue = $("#catItemID").val(); 
    if (!value.match(/^.+$/)) {
      showError3("Vui lòng chọn danh mục");
    } else {
      hideError3();
    }
  });

  $("#catItemID").on("focus", async function (e) {
    hideError3();
  });

const showError4 = (message) => {
    $(".error.changeNamee").text(message);
    $(".error.changeNamee").css("visibility", "visible");
  };
  const hideError4 = () => {
    $(".error.changeNamee").text("");
    $(".error.changeNamee").css("visibility", "hidden");
  };

document.querySelector('.changee').addEventListener('blur', async function (e) {
    const value = e.target.value;
    if (!value.match(str)) {
      showError4("Gồm 5 ký tự trở lên, không chứa số và 2 khoảng trắng liên tiếp");
    } else {
      hideError4();
    }

});

document.querySelector('.changee').addEventListener('focus', function (event) {
    hideError4();
  });
const showError5 = (message) => {
    $(".error.newCatNamee").text(message);
    $(".error.newCatNamee").css("visibility", "visible");
  };
  const hideError5 = () => {
    $(".error.newCatNamee").text("");
    $(".error.newCatNamee").css("visibility", "hidden");
  };

document.querySelector('.catChangee').addEventListener('blur', async function (e) {
    const value = e.target.value;
    if (!value.match(str)) {
      showError5("Tên danh mục gồm 5 ký tự trở lên, không chứa số và 2 khoảng trắng liên tiếp, không trùng với những danh mục đã tồn tại");
    } else {
      hideError5();
    }

});

document.querySelector('.catChangee').addEventListener('focus', function (event) {
    hideError5();
  });
$(document).ready(function () {
    $(document).on('click', '.btnAddCat', function (e) {
        hideError();
        hideError1();
        hideError2();
        hideError3();
        hideError4();
        hideError5();
    })
    $(document).on('click', '.btnAddItem', function (e) {
        e.preventDefault();
        hideError();
        hideError1();
        hideError2();
        hideError3();
        hideError4();
        hideError5();
    })
    $(document).on('click', '.btnChangeCat', function (e) {
        hideError();
        hideError1();
        hideError2();
        hideError3();
        hideError4();
        hideError5();
    })
    $(document).on('click', '.btnChangeItem', function (e) {
        e.preventDefault();
        hideError();
        hideError1();
        hideError2();
        hideError3();
        hideError4();
        hideError5();
    })
});

});

function handleDelete(event, CatID) {
    event.preventDefault();
    let url = new URL(window.location.href);
    url.search = "";
    let params = new URLSearchParams(url.search);
    params.set("delete", CatID);        
    url.search = params.toString();
    window.location.href = url.toString();
}

function handleDeleteItem(event, ItemID){
    event.preventDefault();
    let url = new URL(window.location.href);
    url.search = "";
    
    let params = new URLSearchParams(url.search);

    params.set("deleteItem", ItemID);
    url.search = params.toString();

    //console.log(url)
    window.location.href = url.toString();
}
function validateEdit(catID){
    let itemNamenew = document.getElementById("Cat" + catID).value;
    if (!itemNamenew.match(/^(?=\S)[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/)){
        return false;
    }
    return true;
}
function handleEdit(event, CatID) {
    if (validateEdit(CatID)){
        event.preventDefault();
        let CatName = document.getElementById("Cat" + CatID).value;
        let url = new URL(window.location.href);
        url.search = "";
        let params = new URLSearchParams(url.search);
        params.set("edit", CatID);
        params.set("catName", CatName);
        url.search = params.toString();
        window.location.href = url.toString();
    }  

}
function validateEditItem(itemID){
    let itemNamenew = document.getElementById("Name" + itemID).value;
    if (!itemNamenew.match(/^(?=\S)[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/)){
        return false;
    }
    return true;
}
function handleEditItem(event, itemID) {
    if (validateEditItem(itemID)){
    event.preventDefault();
    let itemNamenew = document.getElementById("Name" + itemID).value;
    let itemType = document.getElementById("select"+ itemID).value;
    let url = new URL(window.location.href);
    url.search = "";
    let params = new URLSearchParams(url.search);
    params.set("editItem", itemID);
    params.set("itemName", itemNamenew);
    params.set("catID", itemType);        
    
    url.search = params.toString();
    //console.log(url)
    window.location.href = url.toString();
    }    
}

function validateSubcategory() {
    let idValue = document.getElementById("newID").value;
    let nameValue = document.getElementById("newNameItem").value;
    let selectedCategory = document.getElementById("catItemID").value;

    if (!idValue.match(/^[A-Z]{3}$/)) {
        return false;
    };
    if (!nameValue.match(/^(?=\S)[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/)){
        return false;
    };

    // Kiểm tra danh mục đã chọn
    if (!selectedCategory.match(/^.+$/)) {
        return false;
    };

    return true;
}

function handleAddItem(event) {
  if (validateSubcategory()){
    event.preventDefault();
    let itemName = document.getElementById("newNameItem").value;
    let itemID = document.getElementById("newID").value;
    let catID = document.getElementById("catItemID").value;
    let url = new URL(window.location.href);
    url.search = "";
    let params = new URLSearchParams(url.search);
    params.set("addtoID", catID);
    params.set("itemID", itemID);
    params.set("itemName", itemName);        
    
    url.search = params.toString();
    //console.log(url)
    window.location.href = url.toString();
  }
}
function validateCategoryName() {
  var categoryNameInput = document.getElementById('addCate');
  var categoryName = categoryNameInput.value.trim();
  if (!categoryName.match(/^(?=\S)[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/)) {
      return false; 
  }
  return true; 
}

function handleAdd(event) {
    if (validateCategoryName()) {
    event.preventDefault(); 
    let CatName = document.getElementById("addCate").value;
    let url = new URL(window.location.href);
    url.search = "";
    
    let params = new URLSearchParams(url.search);

    params.set("add", CatName);
    url.search = params.toString();

    //console.log(url)
    window.location.href = url.toString();
  }
}
let currentPage = 1;
const perPage = 7;
let maxPage = 1;
function updateTable() {
    fetch(`/admin/category/page?page=${currentPage}&perPage=${perPage}`)
        .then(response => response.json())
        .then(data => {
            const tbody = document.querySelector('tbody');
            tbody.innerHTML = '';
            data.cats.forEach(cat => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="align-middle text-center">${cat.catID}</td>
                    <td class="align-middle text-center" value="${cat.catName}" id="Name${cat.catID}">${cat.catName}</td>
                    <td class="align-middle text-center">
                        <button type="button" class="btn btn-warning btnChangeCat" data-bs-toggle="modal" data-bs-target="#exampleModalat${cat.catID}">Đổi tên</button>
                        <div class="modal fade" id="exampleModalat${cat.catID}" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="exampleModalLabel">Sửa tên danh mục</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="col">
                                            <div class="input-group mb-3">
                                                <label class="input-group-text" for="Cat${cat.catID}" id="basic-addon2">Tên mới</label>
                                                <input class="form-control catChangee" name = "catChangee" aria-describedby="basic-addon1"  type="text" value="${cat.catName}" id="Cat${cat.catID}" pattern="^(?!.*\s{2})[a-zA-Z0-9\s_-]{3,50}(?<!\s)$" required>
                                                <i class="error newCatNamee"></i>
                                            </div>
                                        </div>
                                    </div>    
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary cancel" data-bs-dismiss="modal">Đóng</button>
                                        <button type="button" class="btn btn-primary" onclick="handleEdit(event,${cat.catID})">Lưu thay đổi</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button class="btn btn-danger" onclick="handleDelete(event,${cat.catID})">Xoá</button>
                    </td>
                    <td class="align-middle subcategory-list text-center">
                        <button type="button" class="btn btn-info view-subcategories-btn" onclick="toggleSubcategories(this)">Xem chi tiết
                        </button>
                        <!-- Phần tử HTML để chứa danh sách danh mục con -->
                            <div class="subcategories-list" style="display: none;">
                            <table class="table mt-2 table-secondary align-middle">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Tên danh mục</th>
                                        <th>Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${cat.items.map(item => `
                                        <tr>
                                            <td>${item.itemID}</td>
                                            <td>${item.itemName}</td>
                                            <td>
                                                <!-- Nút sửa -->
                                                <button type="button" class="btn btn-warning btnChangeItem" data-bs-toggle="modal" data-bs-target="#exampleModal${item.itemID}">Sửa</button>
                                                <!-- Modal sửa -->
                                                <div class="modal fade" id="exampleModal${item.itemID}" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                                    <div class="modal-dialog">
                                                        <div class="modal-content">
                                                            <div class="modal-header">
                                                                <h5 class="modal-title" id="exampleModalLabel">Chỉnh sửa</h5>
                                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                            </div>
                                                            <div class="modal-body">
                                                            <div class="col">
                                                                <div class="input-group mb-3">
                                                                    <span class="input-group-text" id="basic-addon2">ID</span>
                                                                    <input class="form-control" aria-describedby="basic-addon1"  type="text" value="${item.itemID}" readonly disabled="true">
                                                                </div>
                                                            </div>
                                                            <div class="col">
                                                                <div class="input-group mb-3 ">
                                                                    <label class="input-group-text" for="Name${item.itemID}" id="basic-addon2">Tên</label>
                                                                    <input class="form-control changee" name = "changee" aria-describedby="basic-addon1"  type="text" value="${item.itemName}" id="Name${item.itemID}" pattern="^(?!.*\s{2})[a-zA-Z0-9\s_-]{3,50}(?<!\s)$" required>
                                                                </div>
                                                                <i class="error changeNamee"></i>
                                                            </div>
                                                            <div class="col">
                                                                <div class="input-group mb-3">
                                                                    <label class="input-group-text" for="select${item.itemID}" id="basic-addon2">Thuộc danh mục</label>
                                                                    <select class="form-select form-select-sm" name="changeCatt" aria-label="Small select example" id="select${item.itemID}">
                                                                        <option value="${item.catID}" style="display:none">Chọn danh mục</option>
                                                                        ${data.catsList.map(cat => `
                                                                            <option value="${cat.catID}">${cat.catName}</option>
                                                                        `).join('')}
                                                                    </select>
                                                                </div>
                                                                <i class="error changeCatt"></i>
                                                            </div>
                                                        </div>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-secondary cancel" data-bs-dismiss="modal">Đóng</button>
                                                                <button type="button" class="btn btn-primary" onclick="handleEditItem(event,'${item.itemID}')">Lưu thay đổi</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <!-- Nút xóa -->
                                                <button class="btn btn-danger" onclick="handleDeleteItem(event,'${item.itemID}')">Xóa</button>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </td> `;
                console.log(tr);
                tbody.appendChild(tr);

                /*$(tr).find('table tbody tr').each(function() {
                    // Xử lý sự kiện blur cho tất cả các input có class 'changee' trong bảng nhỏ
                    $(this).find('.changee').on('blur', function (e) {
                        const value = e.target.value;
                        if (!value.match(/^(?=\S)(?!.*\s{6,})[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/)) {
                            showError($(this).siblings(".error.changeNamee"), "Không chứa số và 2 khoảng trắng liên tiếp");
                        } else {
                            hideError($(this).siblings(".error.changeNamee"));
                        }
                    });
                    
                    // Xử lý sự kiện focus cho tất cả các input có class 'changee' trong bảng nhỏ
                    $(this).find('.changee').on('focus', function () {
                        hideError($(this).siblings(".error.changeNamee"));
                    });
                });*/

                $(tr).find('.catChangee').on('blur', function (e) {
                    const value = e.target.value;
                    if (!value.match(/^(?=\S)[a-zA-Z0-9\sáàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]{5,}(?<=\S)$/)) {
                        showError($(this).siblings(".error.newCatNamee"), "Gồm 5 ký tự trở lên, không chứa số và 2 khoảng trắng liên tiếp");
                    } else {
                        hideError($(this).siblings(".error.newCatNamee"));
                    }
                });

                $(tr).find('.catChangee').on('focus', function () {
                    hideError($(this).siblings(".error.newCatNamee"));
                });
            });

           
            maxPage = data.maxPage;
            document.querySelector('.current-page').value = currentPage;
            document.querySelector('.max-page').value = data.maxPage;
        });
        
}

function showError(element, message) {
    element.text(message);
    element.css("visibility", "visible");
}

function hideError(element) {
    element.text("");
    element.css("visibility", "hidden");
}

         
updateTable();

document.querySelector('.previous-page').addEventListener('click', () => {
    if (currentPage > 1) {
        currentPage--;
        updateTable();
    }
});
document.querySelector('.next-page').addEventListener('click', () => {
    if (currentPage < maxPage) {
        currentPage++;
        updateTable();
    }
});
document.querySelector('.go-page').addEventListener('click', () => {
    const inputPage = parseInt(document.querySelector('.current-page').value);
    console.log(maxPage);
    if (!isNaN(inputPage) && inputPage >= 1 && inputPage <= maxPage) {
        currentPage = inputPage;
        updateTable();
    }
    else if (inputPage < 1) {
        document.querySelector('.current-page').value = 1;
        currentPage = 1;
        updateTable();
    }
    else if (inputPage > maxPage) {
        document.querySelector('.current-page').value = maxPage;
        currentPage = maxPage;
        updateTable();
    }
});
$('.current-page').on('change', function () {
    const inputPage = parseInt(document.querySelector('.current-page').value);
    console.log(maxPage);
    if (!isNaN(inputPage) && inputPage >= 1 && inputPage <= maxPage) {
        currentPage = inputPage;
        updateTable();
    }
    else if (inputPage < 1) {
        document.querySelector('.current-page').value = 1;
        currentPage = 1;
        updateTable();
    }
    else if (inputPage > maxPage) {
        document.querySelector('.current-page').value = maxPage;
        currentPage = maxPage;
        updateTable();
    }
});
function toggleSubcategories(button) {
// Lấy phần tử chứa danh sách danh mục con tương ứng
    var subcategoriesList = button.nextElementSibling;

    // Kiểm tra hiển thị hoặc ẩn phần tử chứa danh sách
    if (subcategoriesList.style.display === 'none') {
        subcategoriesList.style.display = 'block';
    } else {
        subcategoriesList.style.display = 'none';
    }
}

</script>
<style>
table {
    border: 1px solid #000; /* Viền 4 cạnh với độ dày là 1px và màu đen */
    border-collapse: collapse; /* Đảm bảo việc gộp viền giữa các ô */
}
.error-message {
    color: red;
    font-size: 0.875rem;
    display: none;
}
.error {
    color: red;
    font-size: 10px;
    font-style: normal;
    font-weight: bold;
}
</style>